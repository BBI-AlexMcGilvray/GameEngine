
{
	"shaderCode" : "#version 450 core
			
// values per vertex
layout(location = 0) in vec3 vPosition;
layout(location = 1) in vec3 vNormal;
layout(location = 2) in vec4 vWeight;
layout(location = 3) in vec4 vBoneIndex; // for some reason, ints are not being read in correctly

// Values that stay constant for the whole mesh
uniform mat4 MVP;
uniform vec4 modColor;
uniform mat4 boneMatrices[50]; // no more than 50 bones for the moment

// values to return to fragment shader
out vec4 Color;
out smooth float CameraFacingRatio;


void main()
{
    // rotational
    vec3 facingCamera = vec3(0.0, 0.0, -1.0);
    vec3 rotatedNormal = vec3(MVP * vec4(vNormal, 0.0));
    float dotProduct = dot(rotatedNormal, facingCamera);

    // the below can be used to outline characters based on normal
    CameraFacingRatio = (dotProduct * dotProduct) / dot(rotatedNormal, rotatedNormal);

    // colour
    Color = modColor * CameraFacingRatio;

    // positional
    vec4 boneWeight = vWeight;
    mat4 boneTransform = (boneMatrices[int(vBoneIndex[0])] * boneWeight[0]);
    boneTransform += (boneMatrices[int(vBoneIndex[1])] * boneWeight[1]);
    boneTransform += (boneMatrices[int(vBoneIndex[2])] * boneWeight[2]);
    boneTransform += (boneMatrices[int(vBoneIndex[3])] * boneWeight[3]);

    gl_Position = MVP * (boneTransform * vec4(vPosition, 1.0));
}
"
}